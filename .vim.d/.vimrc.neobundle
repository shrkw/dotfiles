scriptencoding utf-8

" for NeoBundle -----------------------------------------------------------
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim.d/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim.d/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'grep.vim'
NeoBundle 'twilight256.vim'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'kana/vim-submode'
NeoBundle 'editorconfig/editorconfig-vim'

" You can specify revision/branch/tag.
"NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" for neocomplete -----------------------------------------------------------
let g:neocomplete#enable_at_startup = 1

" for jedi-vim --------------------------------------------------------------
"autocmd FileType python setlocal omnifunc=jedi#completions
"let g:jedi#completions_enabled = 0
"let g:jedi#auto_vim_configuration = 0
"if !exists('g:neocomplete#force_omni_input_patterns')
"        let g:neocomplete#force_omni_input_patterns = {}
"endif
"let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

" for unite.vim -----------------------------------------------------------
" 入力モードで開始する
" let g:unite_enable_start_insert=1
nnoremap [unite] <Nop>
nmap     <Space>u [unite]
" バッファ一覧
nnoremap <silent> [unit]b :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> [unite]u :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
autocmd default FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
autocmd default FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
autocmd default FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
autocmd default FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
autocmd default FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
autocmd default FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

" for lightline ----------------------------------------------------------
let g:lightline = {
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \ }
      \}


function! MyModified()
  return &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &readonly ? '🔒 ' : ''
endfunction

function! MyFilename()
  let fn = expand('%:p')
  let len = 50
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fn ? (strlen(fn) < len ? fn : strpart(fn, strlen(fn) - len, len)) : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠  '._ : ''
  endif
  return ''
endfunction
